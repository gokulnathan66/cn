#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/shm.h>
#include <unistd.h>

#define SHM_KEY 3000
#define MAX_ENTRIES 3
#define NAME_LENGTH 50
#define IP_LENGTH 16
#define MAC_LENGTH 26
#define SHM_SIZE (MAX_ENTRIES * (NAME_LENGTH + IP_LENGTH + 2)) // Name + IP + newline + space

int main() {
    int shmid, a;
    char *ptr, *shmptr;
    char ptr2[NAME_LENGTH], ip[IP_LENGTH], mac[MAC_LENGTH];

    // Access the shared memory segment
    shmid = shmget(SHM_KEY, SHM_SIZE, 0666);
    if (shmid < 0) {
        perror("shmget failed");
        exit(1);
    }

    // Attach the shared memory segment
    shmptr = shmat(shmid, NULL, 0);
    if (shmptr == (char *)(-1)) {
        perror("shmat failed");
        exit(1);
    }

    // Print the ARP table
    puts("The ARP table is:");
    printf("%s\n", shmptr);

    while (1) {
        printf("\n1. ARP\n2. RARP\n3. EXIT\n");
        printf("Choose an option: ");
        scanf("%d", &a);

        switch (a) {
            case 1: // ARP
                puts("Enter IP address:");
                scanf("%s", ip);
                ptr = strstr(shmptr, ip);
                if (ptr != NULL) {
                    ptr -= 8; // Adjust pointer to MAC address
                    sscanf(ptr, "%s%*s", ptr2); // Read MAC address
                    printf("MAC address is: %s\n", ptr2);
                } else {
                    printf("IP address not found.\n");
                }
                break;
                
            case 2: // RARP
                puts("Enter MAC address:");
                scanf("%s", mac);
                ptr = strstr(shmptr, mac);
                if (ptr != NULL) {
                    sscanf(ptr, "%*s%s", ptr2); // Read IP address
                    printf("IP address is: %s\n", ptr2);
                } else {
                    printf("MAC address not found.\n");
                }
                break;
                
            case 3: // EXIT
                shmdt(shmptr); // Detach shared memory before exit
                exit(0);
                
            default:
                printf("Invalid option. Please try again.\n");
        }
    }

    // Detach the shared memory (in case of exiting from loop)
    shmdt(shmptr);
    
    return 0;
}
